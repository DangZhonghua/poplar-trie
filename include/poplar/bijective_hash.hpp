#ifndef POPLAR_TRIE_BIJECTIVE_HASH_HPP
#define POPLAR_TRIE_BIJECTIVE_HASH_HPP

#include "basics.hpp"

namespace poplar::bijective_hash {

// (p, q): p < 2**w is a prime and q < 2**w is an integer such that pq mod m = 1
constexpr uint64_t PRIME_TABLE[][3][2] = {
  {{0ULL,                    0ULL},                   {0ULL,                    0ULL},                   {0ULL,                    0ULL}}, // 0
  {{1ULL,                    1ULL},                   {1ULL,                    1ULL},                   {1ULL,                    1ULL}}, // 1
  {{3ULL,                    3ULL},                   {1ULL,                    1ULL},                   {3ULL,                    3ULL}}, // 2
  {{7ULL,                    7ULL},                   {5ULL,                    5ULL},                   {3ULL,                    3ULL}}, // 3
  {{13ULL,                   5ULL},                   {11ULL,                   3ULL},                   {7ULL,                    7ULL}}, // 4
  {{31ULL,                   31ULL},                  {29ULL,                   21ULL},                  {23ULL,                   7ULL}}, // 5
  {{61ULL,                   21ULL},                  {59ULL,                   51ULL},                  {53ULL,                   29ULL}}, // 6
  {{127ULL,                  127ULL},                 {113ULL,                  17ULL},                  {109ULL,                  101ULL}}, // 7
  {{251ULL,                  51ULL},                  {241ULL,                  17ULL},                  {239ULL,                  15ULL}}, // 8
  {{509ULL,                  341ULL},                 {503ULL,                  455ULL},                 {499ULL,                  315ULL}}, // 9
  {{1021ULL,                 341ULL},                 {1019ULL,                 819ULL},                 {1013ULL,                 93ULL}}, // 10
  {{2039ULL,                 455ULL},                 {2029ULL,                 1509ULL},                {2027ULL,                 195ULL}}, // 11
  {{4093ULL,                 1365ULL},                {4091ULL,                 819ULL},                 {4079ULL,                 3855ULL}}, // 12
  {{8191ULL,                 8191ULL},                {8179ULL,                 4411ULL},                {8171ULL,                 4291ULL}}, // 13
  {{16381ULL,                5461ULL},                {16369ULL,                4369ULL},                {16363ULL,                12483ULL}}, // 14
  {{32749ULL,                13797ULL},               {32719ULL,                10031ULL},               {32717ULL,                1285ULL}}, // 15
  {{65521ULL,                4369ULL},                {65519ULL,                3855ULL},                {65497ULL,                36969ULL}}, // 16
  {{131071ULL,               131071ULL},              {131063ULL,               29127ULL},               {131059ULL,               110907ULL}}, // 17
  {{262139ULL,               209715ULL},              {262133ULL,               95325ULL},               {262127ULL,               200463ULL}}, // 18
  {{524287ULL,               524287ULL},              {524269ULL,               275941ULL},              {524261ULL,               271853ULL}}, // 19
  {{1048573ULL,              349525ULL},              {1048571ULL,              209715ULL},              {1048559ULL,              986895ULL}}, // 20
  {{2097143ULL,              1864135ULL},             {2097133ULL,              1324517ULL},             {2097131ULL,              798915ULL}}, // 21
  {{4194301ULL,              1398101ULL},             {4194287ULL,              986895ULL},              {4194277ULL,              3417581ULL}}, // 22
  {{8388593ULL,              1118481ULL},             {8388587ULL,              798915ULL},              {8388581ULL,              3417581ULL}}, // 23
  {{16777213ULL,             5592405ULL},             {16777199ULL,             986895ULL},              {16777183ULL,             15760415ULL}}, // 24
  {{33554393ULL,             17207401ULL},            {33554383ULL,             31500079ULL},            {33554371ULL,             15952107ULL}}, // 25
  {{67108859ULL,             53687091ULL},            {67108837ULL,             62137837ULL},            {67108819ULL,             50704475ULL}}, // 26
  {{134217689ULL,            17207401ULL},            {134217649ULL,            113830225ULL},           {134217617ULL,            82223473ULL}}, // 27
  {{268435399ULL,            131863031ULL},           {268435367ULL,            96516119ULL},            {268435361ULL,            186492001ULL}}, // 28
  {{536870909ULL,            357913941ULL},           {536870879ULL,            32537631ULL},            {536870869ULL,            274678141ULL}}, // 29
  {{1073741789ULL,           889671797ULL},           {1073741783ULL,           1047552999ULL},          {1073741741ULL,           349289509ULL}}, // 30
  {{2147483647ULL,           2147483647ULL},          {2147483629ULL,           1469330917ULL},          {2147483587ULL,           1056139499ULL}}, // 31
  {{4294967291ULL,           858993459ULL},           {4294967279ULL,           252645135ULL},           {4294967231ULL,           1057222719ULL}}, // 32
  {{8589934583ULL,           7635497415ULL},          {8589934567ULL,           1030792151ULL},          {8589934543ULL,           3856705327ULL}}, // 33
  {{17179869143ULL,          9637487591ULL},          {17179869107ULL,          11825104763ULL},         {17179869071ULL,          12618841967ULL}}, // 34
  {{34359738337ULL,          1108378657ULL},          {34359738319ULL,          21036574511ULL},         {34359738307ULL,          22530975979ULL}}, // 35
  {{68719476731ULL,          13743895347ULL},         {68719476719ULL,          64677154575ULL},         {68719476713ULL,          8963410009ULL}}, // 36
  {{137438953447ULL,         43980465111ULL},         {137438953441ULL,         35468117025ULL},         {137438953427ULL,         70246576219ULL}}, // 37
  {{274877906899ULL,         207685529691ULL},        {274877906857ULL,         41073710233ULL},         {274877906837ULL,         208085144509ULL}}, // 38
  {{549755813881ULL,         78536544841ULL},         {549755813869ULL,         347214198245ULL},        {549755813821ULL,         369238979477ULL}}, // 39
  {{1099511627689ULL,        315951617177ULL},        {1099511627609ULL,        928330176745ULL},        {1099511627581ULL,        343949791253ULL}}, // 40
  {{2199023255531ULL,        209430786243ULL},        {2199023255521ULL,        1134979744801ULL},       {2199023255497ULL,        1119502748281ULL}}, // 41
  {{4398046511093ULL,        1199467230301ULL},       {4398046511087ULL,        3363212037903ULL},       {4398046511071ULL,        3331853417503ULL}}, // 42
  {{8796093022151ULL,        8178823336439ULL},       {8796093022141ULL,        918994793365ULL},        {8796093022091ULL,        2405769031715ULL}}, // 43
  {{17592186044399ULL,       16557351571215ULL},      {17592186044299ULL,       2405769031715ULL},       {17592186044297ULL,       2365335938745ULL}}, // 44
  {{35184372088777ULL,       27507781814905ULL},      {35184372088763ULL,       17847145262451ULL},      {35184372088751ULL,       11293749065551ULL}}, // 45
  {{70368744177643ULL,       13403570319555ULL},      {70368744177607ULL,       34567102403063ULL},      {70368744177601ULL,       4467856773185ULL}}, // 46
  {{140737488355213ULL,      88113905752901ULL},      {140737488355201ULL,      4432676798593ULL},       {140737488355181ULL,      22020151239269ULL}}, // 47
  {{281474976710597ULL,      100186008659725ULL},     {281474976710591ULL,      4330384257087ULL},       {281474976710567ULL,      123342967322647ULL}}, // 48
  {{562949953421231ULL,      222399981598543ULL},     {562949953421201ULL,      25358106009969ULL},      {562949953421189ULL,      366146311168333ULL}}, // 49
  {{1125899906842597ULL,     667199944795629ULL},     {1125899906842589ULL,     289517118902389ULL},     {1125899906842573ULL,     286994093901061ULL}}, // 50
  {{2251799813685119ULL,     558586000294015ULL},     {2251799813685109ULL,     161999986596061ULL},     {2251799813685083ULL,     232003617167571ULL}}, // 51
  {{4503599627370449ULL,     3449565672028465ULL},    {4503599627370353ULL,     3558788516733329ULL},    {4503599627370323ULL,     3514369651416283ULL}}, // 52
  {{9007199254740881ULL,     2840107873116529ULL},    {9007199254740847ULL,     496948924399503ULL},     {9007199254740761ULL,     4991002184445225ULL}}, // 53
  {{18014398509481951ULL,    16922616781634591ULL},   {18014398509481931ULL,    13595772459986403ULL},   {18014398509481853ULL,    6600695637062101ULL}}, // 54
  {{36028797018963913ULL,    20962209174669945ULL},   {36028797018963901ULL,    20434243085382549ULL},   {36028797018963869ULL,    11645671763705525ULL}}, // 55
  {{72057594037927931ULL,    14411518807585587ULL},   {72057594037927909ULL,    18681598454277613ULL},   {72057594037927889ULL,    21463964181510449ULL}}, // 56
  {{144115188075855859ULL,   88686269585142075ULL},   {144115188075855823ULL,   44116894308935471ULL},   {144115188075855811ULL,   18900352534538475ULL}}, // 57
  {{288230376151711687ULL,   126416831645487607ULL},  {288230376151711681ULL,   18300341342965825ULL},   {288230376151711607ULL,   136751638320155207ULL}}, // 58
  {{576460752303423263ULL,   5124095576030431ULL},    {576460752303423061ULL,   2700050362076925ULL},    {576460752303422971ULL,   198471980483577139ULL}}, // 59
  {{1152921504606846883ULL,  12397005425880075ULL},   {1152921504606846803ULL,  566464323072728283ULL},  {1152921504606846697ULL,  4132335141960025ULL}}, // 60
  {{2305843009213693951ULL,  2305843009213693951ULL}, {2305843009213693669ULL,  1768084568902373101ULL}, {2305843009213693613ULL,  360500529464087845ULL}}, // 61
  {{4611686018427387733ULL,  4557748170258646525ULL}, {4611686018427387421ULL,  152768066863019061ULL},  {4611686018427387271ULL,  1515372340968241207ULL}}, // 62
  {{9223372036854775291ULL,  3657236494304118067ULL}, {9223372036854775279ULL,  2545580940228350223ULL}, {9223372036854775181ULL,  3339243145719352645ULL}} // 63
};

class Xorshift {
public:
  Xorshift() = default;

  explicit Xorshift(uint32_t univ_bits) {
    assert(0 < univ_bits && univ_bits < 64);

    shift_ = univ_bits / 2 + 1;
    univ_size_ = size_p2_t{univ_bits};
  }

  uint64_t hash(uint64_t x) const {
    assert(x < univ_size_.size());
    x = hash_(x, 0);
    x = hash_(x, 1);
    x = hash_(x, 2);
    return x;
  }

  uint64_t hash_inv(uint64_t x) const {
    assert(x < univ_size_.size());
    x = hash_inv_(x, 2);
    x = hash_inv_(x, 1);
    x = hash_inv_(x, 0);
    return x;
  }

  uint64_t size() const {
    return univ_size_.size();
  }

  uint64_t bits() const {
    return univ_size_.bits();
  }

  void show_stat(std::ostream& os) const {
    os << "Statistics of Xorshift\n";
    os << " - size: " << size() << "\n";
    os << " - bits: " << bits() << "\n";
  }

private:
  uint32_t shift_{};
  size_p2_t univ_size_{};

  uint64_t hash_(uint64_t x, uint32_t i) const {
    x = x ^ (x >> (shift_ + i));
    x = (x * PRIME_TABLE[univ_size_.bits()][i][0]) & univ_size_.mask();
    return x;
  }
  uint64_t hash_inv_(uint64_t x, uint32_t i) const {
    x = (x * PRIME_TABLE[univ_size_.bits()][i][1]) & univ_size_.mask();
    x = x ^ (x >> (shift_ + i));
    return x;
  }
};

} //ns - poplar::bijective_hash

#endif //POPLAR_TRIE_BIJECTIVE_HASH_HPP
